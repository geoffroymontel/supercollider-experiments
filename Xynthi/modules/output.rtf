{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf2 (\
// build synthDef, synthObj, gui, midiCtrls\
\
// synthDef //\
\
SynthDef(\\tone_out, \{|out=0, in=38, tone=0.5, pan=0, amp=1|\
	var input;\
	input=In.ar(in);\
	input=Tone.ar(input * amp, Clip.kr(tone, 0.01, 1.0));\
	// input=Limiter.ar(input * amp, 0.99, 0.01);\
	Out.ar(out, Pan2.ar(input, pan))\
\}, [nil, nil, 0.02, 0.02, 0.02]).send(s);\
\
// synthObj //\
~output=~busControlledSynth.reproduce;\
~output.synthDefName=\\tone_out;\
~output.fastPlay=false;\
~output.defaultSettings=[0.5, 0, 1];\
~output.makeBusDictionary=\{|self|\
	var bus;\
	bus=Bus.control(s, 3);\
	self.busDictionary=Dictionary[\
		\\tone -> bus.index,\
		\\pan -> (bus.index + 1),\
		\\amp -> (bus.index + 2)\
	];\
	bus.set(self.defaultSettings);\
	self.busarr=bus;\
\};\
// gui //\
~outputGui=~buildGui.reproduce;\
~outputGui.synthObj=~output;\
~outputGui.makeGui=\{|self, w|\
	self.elementDictionary=Dictionary.new;\
	(self.showIO).if(\{\
		w.vert(\{|v|\
			self.elementDictionary.putAll(Dictionary[\
				\\in ->\
				SCNumberBox(v, self.elementStyle.smallBoxSize)\
					.action_(\{|v| self.synthObj.setArgs(\\in, v.value) \}),\
				\\out ->\
				SCNumberBox(v, self.elementStyle.smallBoxSize)\
					.action_(\{|v| self.synthObj.setArgs(\\out, v.value) \})\
			]);\
		\}, 30@40);\
	\});\
	self.elementDictionary.putAll(Dictionary[\
		\\tone ->\
		EZKnob.new(w, self.elementStyle.knobSize, 'tone', \\unipolar,\
			\{|v|\
				self.synthObj.setArgs(\\tone, v.value);\
				self.updateMIDI(\\tone, v.value);\
			\},\
			nil,\
			false,\
			self.elementStyle.knobLabel,\
			self.elementStyle.knobNumber\
		),\
		\\pan ->\
		EZKnob.new(w, self.elementStyle.knobSize, 'pan', \\pan,\
			\{|v|\
				self.synthObj.setArgs(\\pan, v.value);\
				self.updateMIDI(\\pan, v.value);\
			\},\
			nil,\
			false,\
			self.elementStyle.knobLabel,\
			self.elementStyle.knobNumber\
		),\
		\\amp ->\
		EZKnob.new(w, self.elementStyle.knobSize, 'amp', [0, 2, 2],\
			\{|v|\
				self.synthObj.setArgs(\\amp, v.value);\
				self.updateMIDI(\\amp, v.value);\
			\},\
			nil,\
			false,\
			self.elementStyle.knobLabel,\
			self.elementStyle.knobNumber\
		)\
	]);\
	w.vert(\{|v|\
		self.elementDictionary.putAll(Dictionary[\
			\\play ->\
			ToggleButton(v, " P ", \{ \
				self.synthObj.playSynth;\
			\}, \{ \
				self.synthObj.stopSynth;\
			\}).view,\
			\\mute ->\
			ToggleButton(v, " M ", \{\
				self.synthObj.runSynth(false); \
			\}, \{ \
				self.synthObj.runSynth(true);\
			\}).view\
		]);\
		ActionButton(v, " S ", \{\
			CocoaDialog.savePanel(\{|path|\
				var dict;\
				dict=self.getValues;\
				dict.writeTextArchive(path);\
			\})\
		\});\
		ActionButton(v, " L ", \{\
			CocoaDialog.getPaths(\{|path|\
				self.valueDictionary=Object.readTextArchive(path[0]);\
				self.setValues;\
			\})\
		\});	\
	\}, 20@82);\
\};\
~outputGui.valueDictionary=Dictionary[\
	\\in-> 38, \
	\\tone -> 0.5, \
	\\pan -> 0.0,\
	\\out -> 0,\
	\\amp -> 1,\
	\\mute -> 0, \
	\\play -> 1\
];\
\
// MIDI\
~outputMidi = ~incDecMidi.reproduce;\
~outputMidi.synthObj=~outputSynth;\
~outputMidi.guiObj=~outputGui;\
~outputMidi.valueDictionary=~outputGui.valueDictionary.copy;\
~outputMidi.makeResponder=\{|self|\
	self.responderObj=IncDecResponderBank(\
		self.src,\
		self.chan,\
		self.ccDictionary.at(\\tone), 0.0078, \\unipolar, \
			\{|s, c, n, v| \
				self.synthObj.setArgs(\\tone, v); \
				self.updateGui(\\tone, v, \\valueNoAction_); \
			\}, \
			self.valueDictionary.at(\\tone),\
		self.ccDictionary.at(\\pan), 0.0078, \\pan, \
			\{|s, c, n, v| \
				self.synthObj.setArgs(\\pan, v); \
				self.updateGui(\\pan, v, \\valueNoAction_); \
			\}, \
			self.valueDictionary.at(\\pan),\
		self.ccDictionary.at(\\amp), 0.0078, [0, 2, 1], \
			\{|s, c, n, v| \
				self.synthObj.setArgs(\\amp, v); \
				self.updateGui(\\amp, v, \\valueNoAction_); \
			\}, \
			self.valueDictionary.at(\\amp)\
	);\
	self.responderObj;\
\};\
\
~outputInstr=(\
	reproduce: \{|self|\
		var newSelf;\
		newSelf=self.copy;\
		newSelf.theSynth=self.theSynth.reproduce(true);\
		newSelf.theGui=self.theGui.reproduce;\
		newSelf.theGui.synthObj=newSelf.theSynth;\
		newSelf.theMidi=self.theMidi.reproduce;\
		newSelf.theMidi.synthObj=newSelf.theSynth;\
		newSelf.theMidi.guiObj=newSelf.theGui;\
		newSelf;\
	\},\
	theSynth: ~output,\
	theGui: ~outputGui,\
	theMidi: ~outputMidi,\
	midiOn: \{|self|\
		self.theGui.midiObj=self.theMidi;\
	\}\
)\
)}