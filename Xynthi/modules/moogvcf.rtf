{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fswiss\fcharset77 ArialMT;}
{\colortbl;\red255\green255\blue255;\red250\green235\blue215;\red246\green246\blue246;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf2 (\
// build synthDef, synthObj, gui, midiCtrls\
\
// synthDef //\
SynthDef(\\bp_1, \{|in=21, out=0|\
		Out.ar(out, In.ar(in));\
\}).send(s);\
\
SynthDef(\\moog_vcf_1, \cb3 \{|in=21, out=0, freq=440, tune=1, q=0.75, fm_in=37, fm=0, amp=1|\
		Out.ar(out, MoogLadder.ar(In.ar(in), Clip.ar(K2A.ar(freq * tune).ring1(In.ar(fm_in) * fm), 60, 20000), Clip.kr(q, 0.0, 1.25), amp));\
\pard\pardeftab720\ql\qnatural
\cf2 	\}, [nil, nil, 0.02, 0.02, nil, nil, 0.02]\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 ).send(s);\
\
SynthDef(\\moog_vcf_2, \cb3 \{|in=21, out=0, freq=440, tune=1, q=0.75, fm_in=37, fm=0, amp=1|\
		Out.ar(out, MoogLadder.ar(In.ar(in, 2), Clip.ar(K2A.ar(freq * tune).ring1(In.ar(fm_in) * fm), 60, 20000), Clip.kr(q, 0.0, 1.25), amp));\
\pard\pardeftab720\ql\qnatural
\cf2 	\}, [nil, nil, 0.02, 0.02, nil, nil, 0.02]\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 ).send(s);\
\
// synthObj //\
~moogVcf=~busControlledSynth.reproduce;\
~moogVcf.synthDefName=\\moog_vcf_1;\
~moogVcf.fastPlay=false;\
~moogVcf.defaultSettings=[440, 1, 0.75, 0, 1];\
~moogVcf.makeBusDictionary=\{|self|\
	var busarr, rootIndex;\
	(self.masterFreq.isNil).if(\{\
		busarr=Bus.control(self.server, 5);\
		rootIndex=busarr.index;\
		self.busDictionary=Dictionary[\
			\\freq -> rootIndex,\
			\\tune -> (rootIndex + 1),\
			\\q -> (rootIndex + 2),\
			\\fm -> (rootIndex + 3),\
			\\amp -> (rootIndex + 4)\
		];\
		busarr.setn(self.defaultSettings);\
	\}, \{\
		busarr=Bus.control(self.server, 4);\
		rootIndex=busarr.index;\
		self.busDictionary=Dictionary[\
			\\freq -> self.masterFreq.outbus.index,\
			\\tune -> rootIndex,\
			\\q -> (rootIndex + 1),\
			\\fm -> (rootIndex + 2),\
			\\amp -> (rootIndex + 3)\
		];\
		busarr.setn(self.defaultSettings.copyRange(1, 4));\
	\});\
	self.busarr=busarr;\
\};\
// gui //\
~moogVcfGui=~buildGui.reproduce;\
~moogVcfGui.synthObj=~moogVcf;\
~moogVcfGui.makeGui=\{|self, w|\
	var vert, freqRange, resSpec;\
	self.elementDictionary=Dictionary.new;\
	w.vert(\{|v|\
		(self.showIO).if(\{\
			self.elementDictionary.put(\\in,\
				SCNumberBox(v, self.elementStyle.smallBoxSize)\
					.action_(\{|v| self.synthObj.setArgs(\\in, v.value) \})\
			);\
			self.elementDictionary.put(\\fm_in,\
				SCNumberBox(v, self.elementStyle.smallBoxSize)\
					.action_(\{|v| self.synthObj.setArgs(\\fm_in, v.value) \})\
			);\
		\});\
		(self.syncObj.notNil).if(\{\
			self.elementDictionary.put(\\sync,\
				ToggleButton(v, " ^ ", \{\
					var curval, newspec, newact;\
					self.synthObj.nodeMap.map(\\freq, self.syncObj.busDictionary.at(\\freq));\
					self.synthObj.nodeMap.sendToNode(self.synthObj.synthObj);\
					curval=self.elementDictionary.at(\\freq).controlSpec.unmap(\
						self.elementDictionary.at(\\freq).value\
					);\
					newspec=[0, 64].asSpec;\
					curval=newspec.map(curval);\
					self.elementDictionary.at(\\freq).controlSpec_(newspec);\
					newact=\{|v|\
						self.synthObj.setArgs(\\tune, v.value.midiratio);\
						self.updateMIDI(\\freq, v.value);\
					\};\
					self.elementDictionary.at(\\freq).action_(newact);\
					(self.midiObj.notNil).if(\{\
						newact=\{|s, c, n, v|\
							self.midiObj.synthObj.setArgs(\\tune, v.midiratio);\
							self.midiObj.updateGui(\\freq, v);\
						\};\
						self.midiObj.responderObj.updateSpec(self.midiObj.ccDictionary.at(\\freq), newspec);\
						self.midiObj.responderObj.updateFunc(self.midiObj.ccDictionary.at(\\freq), newact);\
						self.midiObj.responderObj.updateValue(self.midiObj.ccDictionary.at(\\freq), curval);\
					\});\
					self.elementDictionary.at(\\freq).value_(curval);\
				\}, \{\
					var curval, newspec, newact;\
					self.synthObj.nodeMap.map(\\freq, self.synthObj.busDictionary.at(\\freq));\
					self.synthObj.nodeMap.sendToNode(self.synthObj.synthObj);\
					self.synthObj.setArgs(\\tune, 1);\
					curval=self.elementDictionary.at(\\freq).controlSpec.unmap(\
						self.elementDictionary.at(\\freq).value\
					);\
					newspec=\\ffreq.asSpec;\
					curval=newspec.map(curval);\
					self.elementDictionary.at(\\freq).controlSpec_(newspec);\
					newact=\{|v|\
						self.synthObj.setArgs(\\freq, v.value);\
						self.updateMIDI(\\freq, v.value);\
					\};\
					self.elementDictionary.at(\\freq).action_(newact);\
					(self.midiObj.notNil).if(\{\
						newact=\{|s, c, n, v|\
							self.midiObj.synthObj.setArgs(\\freq, v);\
							self.midiObj.updateGui(\\freq, v);\
						\};\
						self.midiObj.responderObj.updateSpec(self.midiObj.ccDictionary.at(\\freq), newspec);\
						self.midiObj.responderObj.updateFunc(self.midiObj.ccDictionary.at(\\freq), newact);\
						self.midiObj.responderObj.updateValue(self.midiObj.ccDictionary.at(\\freq), curval);\
					\});\
					self.elementDictionary.at(\\freq).value_(curval);\
				\}).view\
			);\
		\});\
	\}, 20@82);\
	(self.linkIncDec).if(\{\
		resSpec=[0.0078, 0.0005, -1].asSpec;\
		SCSlider(w, 10@80)\
			.action_(\{|v|\
				try \{\
					self.midiObj.responderObj.updateResolution(\
						self.midiObj.ccDictionary.at(\\freq), resSpec.map(v.value)\
					);\
				\}\
			\})\
			.thumbSize_(2);\
	\});\
	self.elementDictionary.putAll(Dictionary[\
		\\freq ->\
		EZKnob.new(w, self.elementStyle.knobSize, 'freq', \\ffreq,\
			\{|v|\
				self.synthObj.setArgs(\\freq, v.value);\
				self.updateMIDI(\\freq, v.value);\
			\},\
			nil,\
			false,\
			self.elementStyle.knobLabel,\
			self.elementStyle.knobNumber\
		),\
		\\q ->\
		EZKnob.new(w, self.elementStyle.knobSize, 'q', [0, 1.25],\
			\{|v|\
				self.synthObj.setArgs(\\q, v.value);\
				self.updateMIDI(\\q, v.value);\
			\},\
			nil,\
			false,\
			self.elementStyle.knobLabel,\
			self.elementStyle.knobNumber\
		),\
		\\fm ->\
		EZKnob.new(w, self.elementStyle.knobSize, 'fm', [0, 32, 10],\
			\{|v|\
				self.synthObj.setArgs(\\fm, v.value);\
				self.updateMIDI(\\fm, v.value);\
			\},\
			nil,\
			false,\
			self.elementStyle.knobLabel,\
			self.elementStyle.knobNumber\
		),\
		\\amp ->\
		EZKnob.new(w, self.elementStyle.knobSize, 'amp', [0, 4, 2],\
			\{|v|\
				self.synthObj.setArgs(\\amp, v.value);\
				self.updateMIDI(\\amp, v.value);\
			\},\
			nil,\
			false,\
			self.elementStyle.knobLabel,\
			self.elementStyle.knobNumber\
		)\
	]);\
	w.vert(\{|v|\
		self.elementDictionary.putAll(Dictionary[\
			\\play ->\
			ToggleButton(v, " P ", \{ \
				self.synthObj.playSynth;\
			\}, \{ \
				self.synthObj.stopSynth;\
			\}).view,\
			\\mute ->\
			ToggleButton(v, " B ", \{\
				self.synthObj.runSynth(false); \
				self.bpObj=Synth.after(self.synthObj.synthObj, \\bp_1, \
					[\\in, self.synthObj.synthArgDictionary.at(\\in),\
						\\out, self.synthObj.synthArgDictionary.at(\\out)\
					]\
				);\
			\}, \{ \
				self.synthObj.runSynth(true);\
				(self.bpObj.notNil).if(\{ self.bpObj.free \});\
			\}).view\
		]);\
		(self.showIO).if(\{\
			self.elementDictionary.put(\\out,\
				SCNumberBox(v, self.elementStyle.smallBoxSize)\
					.action_(\{|v| self.synthObj.setArgs(\\out, v.value) \})\
			);\
		\});\
		ActionButton(v, " S ", \{\
			CocoaDialog.savePanel(\{|path|\
				var dict;\
				dict=self.getValues;\
				dict.writeTextArchive(path);\
			\})\
		\});\
		ActionButton(v, " L ", \{\
			CocoaDialog.getPaths(\{|path|\
				self.valueDictionary=Object.readTextArchive(path[0]);\
				self.setValues;\
			\})\
		\});	\
	\}, 20@82);\
\};\
~moogVcfGui.valueDictionary=Dictionary[\
	\\freq -> 440, \
	\\q -> 0.75, \
	\\fm -> 0,\
	\\amp -> 1,\
	\\fm_in -> 37,\
	\\in -> 21,\
	\\out -> 0, \
	\\mute -> 0, \
	\\play -> 1\
];\
~moogVcfGui.setValues=\{|self, argdict|\
	var dict, newfreq;\
	(argdict.notNil).if(\{\
		dict=argdict.deepCopy;\
	\}, \{\
		dict=self.valueDictionary.deepCopy;\
	\});\
	(dict.notNil).if(\{\
		newfreq=dict.removeAt(\\freq);\
		dict.keysValuesDo(\{|key, value|\
			(self.elementDictionary.at(key).notNil).if(\{\
				(value.isKindOf(Dictionary)).if(\{\
					value.keysValuesDo(\{|vkey, vval|\
						try \{ self.elementDictionary.at(key).perform(vkey, vval) \};\
					\});\
				\}, \{\
					((self.elementDictionary.at(key).isKindOf(EZSlider)) || \
						(self.elementDictionary.at(key).isKindOf(EZKnob))).if(\{\
						try \{ self.elementDictionary.at(key).value_(value) \};\
					\}, \{\
						try \{ self.elementDictionary.at(key).valueAction_(value) \};\
					\});\
				\});\
			\});\
		\});\
		self.elementDictionary.at(\\freq).value_(newfreq);\
		self.valueDictionary.put(\\freq, newfreq);\
	\});\
\};\
\
// MIDI\
~moogVcfMidi = ~incDecMidi.reproduce;\
~moogVcfMidi.synthObj=~moogVcfSynth;\
~moogVcfMidi.guiObj=~moogVcfGui;\
~moogVcfMidi.valueDictionary=~moogVcfGui.valueDictionary.copy;\
~moogVcfMidi.makeResponder=\{|self|\
	self.responderObj=IncDecResponderBank(\
		self.src,\
		self.chan,\
		self.ccDictionary.at(\\freq), 0.0078, \\ffreq, \
			\{|s, c, n, v| \
				self.synthObj.setArgs(\\freq, v); \
				self.updateGui(\\freq, v, \\valueNoAction_); \
			\}, \
			self.valueDictionary.at(\\freq),\
		self.ccDictionary.at(\\q), 0.0078, [0, 1.25], \
			\{|s, c, n, v| \
				self.synthObj.setArgs(\\q, v); \
				self.updateGui(\\q, v, \\valueNoAction_); \
			\}, \
			self.valueDictionary.at(\\q),\
		self.ccDictionary.at(\\fm), 0.0078, [0, 32, 10], \
			\{|s, c, n, v| \
				self.synthObj.setArgs(\\fm, v); \
				self.updateGui(\\fm, v, \\valueNoAction_); \
			\}, \
			self.valueDictionary.at(\\fm),\
		self.ccDictionary.at(\\amp), 0.0078, [0, 4, 2], \
			\{|s, c, n, v| \
				self.synthObj.setArgs(\\amp, v); \
				self.updateGui(\\amp, v, \\valueNoAction_); \
			\}, \
			self.valueDictionary.at(\\amp)\
	);\
	self.responderObj;\
\};\
\
~moogVcfInstr=(\
	reproduce: \{|self|\
		var newSelf;\
		newSelf=self.copy;\
		newSelf.theSynth=self.theSynth.reproduce(true);\
		newSelf.theGui=self.theGui.reproduce;\
		newSelf.theGui.synthObj=newSelf.theSynth;\
		newSelf.theMidi=self.theMidi.reproduce;\
		newSelf.theMidi.synthObj=newSelf.theSynth;\
		newSelf.theMidi.guiObj=newSelf.theGui;\
		newSelf;\
	\},\
	theSynth: ~moogVcf,\
	theGui: ~moogVcfGui,\
	theMidi: ~moogVcfMidi,\
	midiOn: \{|self|\
		self.theGui.midiObj=self.theMidi;\
	\}\
)\
)}